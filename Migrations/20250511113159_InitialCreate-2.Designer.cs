// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using jupter_server.Models;

#nullable disable

namespace jupter_server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250511113159_InitialCreate-2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("jupter_server.Models.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Reserve")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("introduce")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("sequence");

                    b.ToTable("Gallery");
                });

            modelBuilder.Entity("jupter_server.Models.GalleryAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Reserve")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("introduce")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("GalleryAlbum");
                });

            modelBuilder.Entity("jupter_server.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Reserve")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("detail")
                        .HasColumnType("text");

                    b.Property<string>("imgSrc")
                        .HasColumnType("text");

                    b.Property<string>("includings")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("jupter_server.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhotoId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Reserve")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("bookingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("photoAmount")
                        .HasColumnType("integer");

                    b.Property<string>("postscript")
                        .HasColumnType("text");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<string>("session")
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PhotoId1");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("jupter_server.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GalleryAlbumId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Reserve")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserAlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int?>("sequence")
                        .HasColumnType("integer");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GalleryAlbumId");

                    b.HasIndex("UserAlbumId");

                    b.HasIndex("sequence");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("jupter_server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Reserve")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("email");

                    b.ToTable("User");
                });

            modelBuilder.Entity("jupter_server.Models.UserAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Reserve")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("introduce")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserAlbum");
                });

            modelBuilder.Entity("jupter_server.Models.GalleryAlbum", b =>
                {
                    b.HasOne("jupter_server.Models.Gallery", "Gallery")
                        .WithMany("GalleryAlbums")
                        .HasForeignKey("GalleryId");

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("jupter_server.Models.Order", b =>
                {
                    b.HasOne("jupter_server.Models.Item", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jupter_server.Models.Photo", null)
                        .WithMany("GalleryAlbums")
                        .HasForeignKey("PhotoId");

                    b.HasOne("jupter_server.Models.Photo", null)
                        .WithMany("UserAlbums")
                        .HasForeignKey("PhotoId1");

                    b.HasOne("jupter_server.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("jupter_server.Models.Photo", b =>
                {
                    b.HasOne("jupter_server.Models.GalleryAlbum", null)
                        .WithMany("Photos")
                        .HasForeignKey("GalleryAlbumId");

                    b.HasOne("jupter_server.Models.UserAlbum", null)
                        .WithMany("Photos")
                        .HasForeignKey("UserAlbumId");
                });

            modelBuilder.Entity("jupter_server.Models.Gallery", b =>
                {
                    b.Navigation("GalleryAlbums");
                });

            modelBuilder.Entity("jupter_server.Models.GalleryAlbum", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("jupter_server.Models.Item", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("jupter_server.Models.Photo", b =>
                {
                    b.Navigation("GalleryAlbums");

                    b.Navigation("UserAlbums");
                });

            modelBuilder.Entity("jupter_server.Models.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("jupter_server.Models.UserAlbum", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
